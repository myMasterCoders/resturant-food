import {
  tsObject
} from "./chunk-K2EWJMCD.js";
import {
  isUndefined
} from "./chunk-F45GO7K2.js";
import {
  isNull
} from "./chunk-TK4YRMRC.js";
import {
  isFunction
} from "./chunk-CQJCSTBU.js";
import {
  isDate
} from "./chunk-4GTX7FBA.js";
import {
  isObject
} from "./chunk-XUWL4VKZ.js";
import {
  isFile
} from "./chunk-TZZM7RNI.js";
import {
  isNumeric
} from "./chunk-OBG63REY.js";
import {
  isArray
} from "./chunk-UDVSPJHY.js";
import {
  isBlob
} from "./chunk-UDW3FTZT.js";
import {
  isBoolean
} from "./chunk-42JGV6MK.js";
import {
  isString
} from "./chunk-RUB2ELNH.js";

// src/objects/object-to-formdata/object-to-formdata.ts
var DEFAULT_OPTIONS = {
  indices: false,
  nullValues: "omit",
  booleanValues: "preserve-as-strings",
  emptyArrays: "omit",
  arrayBrackets: "append",
  objectKeysNotation: "brackets"
};
var serialize = (key, value, options, formData) => {
  if (isUndefined(value))
    return;
  if (isNull(value)) {
    if (options.nullValues === "omit")
      return;
    const realValue = options.nullValues === "preserve-as-empty-string" ? "" : "null";
    formData.append(key, realValue);
    return;
  }
  if (isDate(value)) {
    formData.append(key, value.toISOString());
    return;
  }
  if (isBoolean(value)) {
    const realValue = options.booleanValues === "preserve-as-integers" ? value ? "1" : "0" : value.toString();
    formData.append(key, realValue);
    return;
  }
  if (isArray(value)) {
    if (!value.length) {
      if (options.emptyArrays === "preserve") {
        formData.append(key, "");
      }
      return;
    }
    const isFilesArray = value.every((innerValue) => isFile(innerValue));
    value.forEach((arrayValue, index) => {
      const arrayKey = (() => {
        if (options.arrayBrackets === "append" || options.arrayBrackets === "append-only-for-files" && isFilesArray)
          return `${key}[${options.indices ? index : ""}]`;
        return key.replaceAll(/\[]$/gm, "");
      })();
      serialize(arrayKey, arrayValue, options, formData);
    });
    return;
  }
  if (isBlob(value)) {
    formData.append(key, value);
    return;
  }
  if (isObject(value)) {
    tsObject.entries(value).forEach(([innerKey, innerValue]) => {
      const realInnerKey = (() => {
        if (!key)
          return innerKey;
        return options.objectKeysNotation === "brackets" ? `${key}[${innerKey}]` : `${key}.${innerKey}`;
      })();
      serialize(realInnerKey, innerValue, options, formData);
    });
    return;
  }
  if (isNumeric(value)) {
    formData.append(key, value.toString());
    return;
  }
  if (isString(value) || isFunction(value?.toString)) {
    formData.append(key, value.toString());
  }
};
var objectToFormdata = (object, userOptions, existingFormData) => {
  const options = { ...DEFAULT_OPTIONS, ...userOptions };
  const formData = existingFormData ?? new FormData();
  serialize("", object, options, formData);
  return formData;
};

export {
  objectToFormdata
};
