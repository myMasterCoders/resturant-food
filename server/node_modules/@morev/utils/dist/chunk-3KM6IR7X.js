import {
  createConfiguration,
  errorCreatorFactory,
  messageFormatter
} from "./chunk-VGCSJZU3.js";
import {
  isNullish
} from "./chunk-Z5IVBZLV.js";
import {
  isFunction
} from "./chunk-CQJCSTBU.js";
import {
  isBoolean
} from "./chunk-42JGV6MK.js";

// src/functions/assert/assert.ts
var configuration = createConfiguration();
var _createAssert = (soft) => (conditionOrValue, message, properties) => {
  const createError = (type, props2) => configuration.errorCreator(type, message, props2);
  const report = (type, props2, error) => {
    error && configuration.errorReporter?.(type, error, message, props2);
    !error && configuration.warningReporter?.(type, message, props2);
  };
  const props = isFunction(properties) ? properties() : properties ?? {};
  if (isBoolean(conditionOrValue) && !conditionOrValue) {
    if (!soft) {
      const error = createError("condition", props);
      report("condition", props, error);
      throw error;
    }
    report("condition", props);
    return false;
  }
  if (isNullish(conditionOrValue)) {
    if (!soft) {
      const error = createError("no-value", props);
      report("no-value", props, error);
      throw error;
    }
    report("no-value", props);
    return false;
  }
  return conditionOrValue;
};
var hardAssert = _createAssert(false);
var softAssert = _createAssert(true);
var _assert = hardAssert;
_assert.soft = softAssert;
var assert = _assert;
var configureAssert = (customConfiguration) => {
  configuration = {
    ...configuration,
    ...customConfiguration,
    errorCreator: customConfiguration.errorCreator ?? errorCreatorFactory(customConfiguration.formatter ?? messageFormatter)
  };
};

export {
  assert,
  configureAssert
};
