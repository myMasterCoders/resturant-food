import {
  rangesMerge
} from "./chunk-SAB4LHU2.js";

// src/ranges/ranges-intersection/ranges-intersection.ts
var DEFAULT_OPTIONS = {
  inclusive: false
};
var safeNumber = (maybeNumber, sign = "+") => maybeNumber ?? (sign === "+" ? Infinity : -Infinity);
var rangesIntersection = (ranges, userOptions) => {
  if (!ranges)
    return [];
  const options = { ...DEFAULT_OPTIONS, ...userOptions };
  const isOverlapping = (minRange, maxRange) => {
    return options.inclusive ? safeNumber(minRange[1]) >= safeNumber(maxRange[0], "-") : safeNumber(minRange[1]) > safeNumber(maxRange[0], "-");
  };
  const matches = ranges.filter(Boolean).reduce(
    (acc, r1, index) => {
      if (index === ranges.length - 1)
        return acc;
      const restRanges = ranges.slice(index + 1).filter(Boolean);
      restRanges.forEach((r2) => {
        const min = safeNumber(r1[0], "-") < safeNumber(r2[0], "-") ? r1 : r2;
        const max = min === r1 ? r2 : r1;
        if (!isOverlapping(min, max))
          return null;
        acc.push([
          safeNumber(max[0], "-"),
          safeNumber(min[1]) < safeNumber(max[1]) ? safeNumber(min[1]) : safeNumber(max[1])
        ]);
      });
      return acc;
    },
    []
  );
  return rangesMerge(matches, options.inclusive);
};

export {
  rangesIntersection
};
