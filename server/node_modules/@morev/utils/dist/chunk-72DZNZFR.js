import {
  isObject
} from "./chunk-XUWL4VKZ.js";

// src/functions/throttle/throttle.ts
var parseOptions = (optionsOrDelay) => {
  if (isObject(optionsOrDelay)) {
    return [
      optionsOrDelay.delay ?? 0,
      optionsOrDelay.leading ?? true,
      optionsOrDelay.trailing ?? true
    ];
  }
  return [optionsOrDelay ?? 0, true, true];
};
var throttle = (callback, optionsOrDelay) => {
  const [delay, leading, trailing] = parseOptions(optionsOrDelay);
  let timeoutID = null;
  let cancelled;
  let lastExec = leading ? 0 : Date.now();
  const clearExistingTimeout = () => {
    if (!timeoutID)
      return;
    clearTimeout(timeoutID);
    timeoutID = null;
  };
  const cancel = () => {
    clearExistingTimeout();
    cancelled = true;
  };
  const trailingExec = (exec) => {
    if (!trailing)
      return;
    clearExistingTimeout();
    timeoutID ||= setTimeout(exec, delay);
  };
  function wrapper(...args) {
    if (cancelled)
      return;
    const self = this;
    const exec = () => {
      lastExec = Date.now();
      callback.apply(self, args);
    };
    trailingExec(exec);
    const runTime = Date.now() - lastExec;
    if (runTime > delay)
      exec();
  }
  wrapper.cancel = cancel;
  return wrapper;
};

export {
  throttle
};
