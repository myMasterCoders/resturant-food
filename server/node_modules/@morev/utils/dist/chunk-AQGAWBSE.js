import {
  kebabCase
} from "./chunk-KJRDAHBD.js";
import {
  pascalCase
} from "./chunk-LG4UJQF2.js";
import {
  snakeCase
} from "./chunk-7SVUEZ2T.js";
import {
  camelCase
} from "./chunk-T5PJGW6H.js";
import {
  isRegExp
} from "./chunk-5HZ32HEL.js";
import {
  isObject
} from "./chunk-XUWL4VKZ.js";
import {
  isArray
} from "./chunk-UDVSPJHY.js";
import {
  isString
} from "./chunk-RUB2ELNH.js";

// src/objects/object-keys-case/object-keys-case.ts
var getPath = (path, ...parts) => path ? `${path}.${parts.join(".")}` : parts.join(".");
var getHandler = (neededCase) => {
  switch (neededCase) {
    case "snake_case":
      return snakeCase;
    case "PascalCase":
      return pascalCase;
    case "camelCase":
      return camelCase;
    case "kebab-case":
      return kebabCase;
    default:
      return (v) => v;
  }
};
var objectKeysCase = (input, neededCase, _options) => {
  const options = {
    depth: Infinity,
    exclude: [],
    excludeBranches: [],
    ..._options
  };
  const handler = getHandler(neededCase);
  const isExcluded = (type, key) => {
    const entity = type === "key" ? options.exclude : options.excludeBranches;
    return entity.some((item) => {
      if (isString(item))
        return item === key;
      if (isRegExp(item))
        return item.test(key);
      return false;
    });
  };
  const isDepthAllowed = (depth) => options.depth > depth;
  const processEntry = (entry, path, depth) => {
    if (!isObject(entry) && !isArray(entry))
      return entry;
    const isEntryArray = isArray(entry);
    return Object.entries(entry).reduce((acc, [_key, _value]) => {
      const shouldTransformKey = !isExcluded("key", _key) && !isExcluded("branch", getPath(path, _key)) && isDepthAllowed(depth);
      const shouldTransformValue = !isExcluded("branch", getPath(path, _key)) && isDepthAllowed(depth + 1);
      const key = shouldTransformKey ? handler(_key) : _key;
      const value = shouldTransformValue ? processEntry(_value, getPath(path, _key), depth + 1) : _value;
      if (isEntryArray)
        acc.push(value);
      if (!isEntryArray)
        acc[key] = value;
      return acc;
    }, isEntryArray ? [] : {});
  };
  return processEntry(input, "", 0);
};

export {
  objectKeysCase
};
