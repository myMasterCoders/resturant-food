import {
  capitalize
} from "./chunk-CJ426L5V.js";
import {
  isDate
} from "./chunk-4GTX7FBA.js";
import {
  isEmpty
} from "./chunk-ED5RUP25.js";
import {
  isArray
} from "./chunk-UDVSPJHY.js";
import {
  isString
} from "./chunk-RUB2ELNH.js";

// src/cookies/parse-response-cookie/parse-response-cookie.utils.ts
var parseNameValuePair = (maybePair) => {
  const parts = maybePair.split("=");
  if (parts.length === 1) {
    return { name: "", value: maybePair };
  }
  if (parts.length > 1) {
    const [name, ...values] = parts;
    return { name, value: values.join("=") };
  }
  return null;
};
var DEFAULT_OPTIONS = {
  decodeValues: true,
  returnType: "array"
};
var parseCookieChunk = (chunk, decodeValues) => {
  const parts = chunk.split(";").filter(Boolean);
  const pair = parts.shift();
  if (!pair)
    return null;
  const parsed = parseNameValuePair(pair);
  if (!parsed)
    return null;
  const value = (() => {
    if (!decodeValues)
      return parsed.value;
    try {
      return decodeURIComponent(parsed.value);
    } catch {
      return parsed.value;
    }
  })();
  const cookie = {
    name: parsed.name,
    value
  };
  parts.forEach((part) => {
    const sides = part.split("=");
    if (isEmpty(sides))
      return;
    const key = sides.shift().trim().toLowerCase();
    const keyValue = sides.join("=");
    if (key === "expires") {
      const maybeDate = new Date(keyValue);
      if (!isDate(maybeDate, true))
        return;
      cookie.expires = new Date(keyValue);
      return;
    }
    if (key === "max-age") {
      const maybeNumber = parseInt(keyValue, 10);
      if (Number.isNaN(maybeNumber))
        return;
      cookie.maxAge = maybeNumber;
      return;
    }
    if (key === "secure") {
      cookie.secure = true;
      return;
    }
    if (key === "httponly") {
      cookie.httpOnly = true;
      return;
    }
    if (key === "samesite") {
      if (keyValue.toLowerCase() === "strict" || keyValue.toLowerCase() === "lax" || keyValue.toLowerCase() === "none") {
        cookie.sameSite = capitalize(keyValue.toLowerCase());
      }
      return;
    }
    if (key === "partitioned") {
      cookie.partitioned = true;
      return;
    }
    if (key === "priority") {
      if (keyValue.toLowerCase() === "low" || keyValue.toLowerCase() === "medium" || keyValue.toLowerCase() === "high") {
        cookie.priority = capitalize(keyValue.toLowerCase());
      }
      return;
    }
    keyValue && (cookie[key] = keyValue);
  });
  return cookie;
};
var splitCookiesString = (cookiesString) => {
  if (isArray(cookiesString))
    return cookiesString;
  if (!isString(cookiesString))
    return [];
  const cookieStrings = [];
  let position = 0;
  const skipWhitespace = () => {
    while (position < cookiesString.length && /\s/.test(cookiesString[position])) {
      position++;
    }
    return position < cookiesString.length;
  };
  const notSpecialCharacter = () => {
    return !["=", ";", ","].includes(cookiesString[position]);
  };
  while (position < cookiesString.length) {
    let start = position;
    let cookiesSeparatorFound = false;
    let lastComma = 0;
    let nextStart = 0;
    while (skipWhitespace()) {
      if (cookiesString[position] !== ",") {
        position++;
        continue;
      }
      lastComma = position++;
      skipWhitespace();
      nextStart = position;
      while (notSpecialCharacter() && position < cookiesString.length) {
        position++;
      }
      if (position < cookiesString.length && cookiesString[position] === "=") {
        cookiesSeparatorFound = true;
        position = nextStart;
        cookieStrings.push(cookiesString.slice(start, lastComma));
        start = position;
      } else {
        position = lastComma + 1;
      }
    }
    if (!cookiesSeparatorFound || position >= cookiesString.length) {
      cookieStrings.push(cookiesString.slice(start, cookiesString.length));
    }
  }
  return cookieStrings;
};

export {
  DEFAULT_OPTIONS,
  parseCookieChunk,
  splitCookiesString
};
