import {
  rangeIncludes
} from "./chunk-7YVTPQCR.js";
import {
  rangesCrop
} from "./chunk-DCKLXD6Y.js";
import {
  rangesMerge
} from "./chunk-SAB4LHU2.js";
import {
  formatInfinity
} from "./chunk-XGEUS3NH.js";
import {
  isNullish
} from "./chunk-Z5IVBZLV.js";

// src/ranges/ranges-invert/ranges-invert.ts
var rangesInvert = (ranges, start = null, end = null, infinityToNull = false) => {
  if (isNullish(start))
    start = -Infinity;
  if (isNullish(end))
    end = Infinity;
  return rangesCrop(
    rangesMerge(ranges, true, infinityToNull).reduce((acc, range, i, arr) => {
      const res = [];
      if (i === 0 && arr[0][0] > start) {
        res.push([
          formatInfinity(start, infinityToNull),
          formatInfinity(arr[0][0], infinityToNull)
        ]);
      }
      const tail = i < arr.length - 1 ? arr[i + 1][0] : end;
      if (!rangeIncludes(end, [range])) {
        res.push([
          formatInfinity((range[1] ?? -Infinity) > start ? range[1] : start, infinityToNull),
          formatInfinity(tail, infinityToNull)
        ]);
      }
      return res.length ? [...acc, ...res] : acc;
    }, []),
    start,
    end,
    infinityToNull
  );
};

export {
  rangesInvert
};
