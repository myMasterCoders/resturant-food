import {
  clamp
} from "./chunk-EJGCYSTB.js";
import {
  toArray
} from "./chunk-OAZLYBJA.js";
import {
  rangesIntersection
} from "./chunk-52ZB5VTF.js";
import {
  isUndefined
} from "./chunk-F45GO7K2.js";

// src/arrays/array-swap/array-swap.ts
var arraySwapMutable = (arr, firstPosition, secondPosition) => {
  const isInRange = (index) => index >= 0 && index <= arr.length - 1;
  const [first, second] = [firstPosition, secondPosition].map((position) => toArray(position)).sort((a, b) => a[0] > b[0] ? 1 : -1);
  if (first.some((position) => !isInRange(position))) {
    throw new Error("First swap position outside the array range");
  }
  if (!isUndefined(first[1]) && first[1] < first[0]) {
    throw new Error("The end edge of the first position is lower than the start edge");
  }
  if (second.some((position) => !isInRange(position))) {
    throw new Error("Second swap position outside the array range");
  }
  if (!isUndefined(second[1]) && second[1] < second[0]) {
    throw new Error("The end edge of the second position is lower than the start edge");
  }
  if (first.length === 1 && second.length === 1) {
    [arr[first[0]], arr[second[0]]] = [arr[second[0]], arr[first[0]]];
    return arr;
  }
  const [firstRange, secondRange] = [first, second].map((values) => values.length === 1 ? [values[0], values[0]] : values);
  if (rangesIntersection([firstRange, secondRange], { inclusive: true }).length) {
    throw new Error("The edges cannot be crossed");
  }
  const firstSlice = arr.splice(first[0], first[1] ? first[1] - first[0] + 1 : 1);
  const secondSlice = arr.splice(
    clamp(second[0] - firstSlice.length, 0),
    second[1] ? second[1] - second[0] + 1 : 1
  );
  arr.splice(first[0], 0, ...secondSlice);
  arr.splice(second[0] + secondSlice.length - firstSlice.length, 0, ...firstSlice);
  return arr;
};
var arraySwap = (arr, firstPosition, secondPosition) => {
  return arraySwapMutable([...arr], firstPosition, secondPosition);
};

export {
  arraySwapMutable,
  arraySwap
};
