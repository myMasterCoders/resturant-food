import {
  toDate
} from "./chunk-2XXLBNSI.js";
import {
  FORMAT_DATE_LOCALE_EN,
  FORMAT_DATE_LOCALE_RU
} from "./chunk-M5HBLC4T.js";
import {
  ORDERED_DAY_INDICES,
  TOKEN,
  pad
} from "./chunk-ZH3ZSQ4E.js";
import {
  mergeObjects
} from "./chunk-SYYF6SU6.js";
import {
  toArray
} from "./chunk-OAZLYBJA.js";
import {
  prefixedDateMethodsFactory
} from "./chunk-WI7PHIEY.js";

// src/dates/format-date/format-date.ts
var _formatDate = (pattern, locales, input, options) => {
  const { utc, locale } = options;
  const date = toDate(input);
  if (!date)
    return null;
  const $i18n = locales.find(({ name }) => name === locale)?.values;
  if (!$i18n) {
    throw new Error(`The locale object for locale \`${locale}\` does not exists.`);
  }
  const localized = (entity, type, variant, index) => {
    const _type = toArray($i18n[`${entity}Names`][type][index]);
    return variant === "standalone" ? _type[0] : _type[1] ?? _type[0];
  };
  const get = prefixedDateMethodsFactory("get", utc);
  const day = () => date[get("Date")]();
  const weekday = () => date[get("Day")]();
  const month = () => date[get("Month")]();
  const year = () => date[get("FullYear")]();
  const hours = () => date[get("Hours")]();
  const minutes = () => date[get("Minutes")]();
  const seconds = () => date[get("Seconds")]();
  const weekdayIndex = () => {
    const offset = weekday() - $i18n.firstDayOfWeekIndex;
    return ORDERED_DAY_INDICES.at(offset) + 1;
  };
  const timezone = (format) => {
    const offset = utc ? 0 : date.getTimezoneOffset();
    if (offset === 0)
      return "Z";
    const sign = offset < 0 ? "+" : "-";
    const offsetHours = Math.floor(Math.abs(offset) / 60);
    const offsetMinutes = Math.abs(offset) - offsetHours * 60;
    const joinCharacter = ["basic", "minimal"].includes(format) ? "" : ":";
    const filterer = format === "minimal" ? (value) => value !== 0 : (value) => true;
    const time = [offsetHours, offsetMinutes].filter((value) => filterer(value)).map((part) => pad(part)).join(joinCharacter);
    return `${sign}${time}`;
  };
  const matchers = {
    // Year
    yy: () => year().toString().slice(-2),
    yyyy: () => pad(year(), 4),
    // Month (standalone)
    L: () => month() + 1,
    LL: () => pad(month() + 1),
    LLL: () => localized("month", "abbreviated", "standalone", month()),
    _LLL: () => localized("month", "abbreviated", "standalone", month()).toLocaleLowerCase(),
    LLLL: () => localized("month", "wide", "standalone", month()),
    _LLLL: () => localized("month", "wide", "standalone", month()).toLocaleLowerCase(),
    // Month (format)
    M: () => month() + 1,
    MM: () => pad(month() + 1),
    MMM: () => localized("month", "abbreviated", "format", month()),
    _MMM: () => localized("month", "abbreviated", "format", month()).toLocaleLowerCase(),
    MMMM: () => localized("month", "wide", "format", month()),
    _MMMM: () => localized("month", "wide", "format", month()).toLocaleLowerCase(),
    // Weekday (standalone)
    c: () => weekdayIndex(),
    cc: () => pad(weekdayIndex()),
    ccc: () => localized("day", "abbreviated", "standalone", weekday()),
    _ccc: () => localized("day", "abbreviated", "standalone", weekday()).toLocaleLowerCase(),
    cccc: () => localized("day", "wide", "standalone", weekday()),
    _cccc: () => localized("day", "wide", "standalone", weekday()).toLocaleLowerCase(),
    // Weekday (format)
    e: () => weekdayIndex(),
    ee: () => pad(weekdayIndex()),
    eee: () => localized("day", "abbreviated", "format", weekday()),
    _eee: () => localized("day", "abbreviated", "format", weekday()).toLocaleLowerCase(),
    eeee: () => localized("day", "wide", "format", weekday()),
    _eeee: () => localized("day", "wide", "format", weekday()).toLocaleLowerCase(),
    // Day
    d: () => day(),
    dd: () => pad(day()),
    // Hours
    h: () => hours() % 12 || 12,
    hh: () => pad(hours() % 12 || 12),
    H: () => hours(),
    HH: () => pad(hours()),
    // Minutes
    m: () => minutes(),
    mm: () => pad(minutes()),
    // Seconds
    s: () => seconds(),
    ss: () => pad(seconds()),
    // Timezone as JS-compatible string
    X: () => timezone("minimal"),
    XX: () => timezone("basic"),
    XXX: () => timezone("extended")
  };
  return pattern.replaceAll(TOKEN, (match) => {
    if (match in matchers) {
      return matchers[match]();
    }
    return match.slice(1, -1);
  });
};
var createFormatDate = (localeData, defaultOptions) => {
  return (pattern, input = /* @__PURE__ */ new Date(), options) => {
    return _formatDate(pattern, toArray(localeData), input, mergeObjects(defaultOptions, options));
  };
};
var formatDate = createFormatDate([FORMAT_DATE_LOCALE_EN, FORMAT_DATE_LOCALE_RU], { utc: false, locale: "en" });
var formatDateRu = createFormatDate(FORMAT_DATE_LOCALE_RU, { utc: false, locale: "ru" });
var formatDateEn = createFormatDate(FORMAT_DATE_LOCALE_EN, { utc: false, locale: "en" });

export {
  createFormatDate,
  formatDate,
  formatDateRu,
  formatDateEn
};
