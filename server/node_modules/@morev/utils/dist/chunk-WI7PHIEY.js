// src/dates/dates.utils.ts
var ISO_DATETIME_REG_EXP = /^(\d{4})-(0[1-9]|1[02])-(0[1-9]|[12]\d|3[01])(?:[ T](0\d|1\d|2[0-3]):([0-5]\d):([0-5]\d)(?:\.(\d{3}))?(?:Z|([+-](?:0\d|1\d|2[0-3])(?::?[0-5]\d)?))?)?$/;
var RU_DATETIME_REG_EXP = /^([1-9]|0\d|[12]\d|3[01])\.(0[1-9]|[1-9]|1[0-2])\.(\d{4})(?:\s*([01]\d|2[0-3]|\d)(?::(0\d|[1-5]\d|\d))?(?::(0\d|[1-5]\d|\d))?(?:.(\d{3}))?)?$/;
var EN_DATETIME_REG_EXP = /^(0[1-9]|[1-9]|1[0-2])\/([1-9]|0\d|[12]\d|3[01])\/(\d{4})(?:\s*([01]\d|2[0-3]|\d)(?::(0\d|[1-5]\d|\d))?(?::(0\d|[1-5]\d|\d))?(?:.(\d{3}))?)?$/;
var prefixedDateMethodsFactory = (type, utc) => {
  return (string) => {
    const prefix = /* @__PURE__ */ (() => {
      const value = type === "get" ? utc ? "getUTC" : "get" : utc ? "setUTC" : "set";
      return value;
    })();
    return `${prefix}${string}`;
  };
};
var createDateFromTokens = (tokens) => {
  const date = new Date(Date.UTC(tokens.year, tokens.month, tokens.day));
  if (date.getUTCMonth() !== tokens.month || date.getUTCDate() !== tokens.day) {
    return null;
  }
  date.setUTCHours(tokens.hours);
  date.setUTCMinutes(tokens.minutes);
  date.setUTCSeconds(tokens.seconds);
  date.setUTCMilliseconds(tokens.milliseconds);
  if (!tokens.offset)
    return date;
  date.setUTCMinutes(date.getUTCMinutes() + tokens.offset);
  return date;
};

export {
  ISO_DATETIME_REG_EXP,
  RU_DATETIME_REG_EXP,
  EN_DATETIME_REG_EXP,
  prefixedDateMethodsFactory,
  createDateFromTokens
};
